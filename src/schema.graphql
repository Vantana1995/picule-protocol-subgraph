enum TransactionType {
  DEX
  ERC20
  ERC721
  MARKETPLACE
  ICO
  TLM
  FUNDS
}
#  Transaction entity
type Transaction @entity(immutable: true) {
  id: ID! # txn hash
  blockNumber: BigInt!
  timestamp: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!

  # type
  type: TransactionType!

  # DEX
  mints: [Mint!]!
  burns: [Burn!]!
  swaps: [Swap!]!

  # ERC20
  erc20Mints: [ERC20Mint!]!
  erc20Burns: [ERC20Burn!]!

  # ERC721
  erc721Transfers: [ERC721Transfer!]! @derivedFrom(field: "transaction")

  # Marketplace
  sales: [Sale!]! @derivedFrom(field: "transaction")
  priceUpdates: [PriceUpdate!]! @derivedFrom(field: "transaction")
  cancellations: [ListingCancellation!]! @derivedFrom(field: "transaction")

  # ICO
  contributions: [Contribution!]! @derivedFrom(field: "transaction")
  icoRequests: [ICORequest!]! @derivedFrom(field: "transaction")

  # TLM
  projects: [Project!]! @derivedFrom(field: "transaction")
  checkpoints: [Checkpoint!]! @derivedFrom(field: "transaction")
  lpTokenLocks: [LPTokenLock!]! @derivedFrom(field: "transaction")
  bonusClaims: [BonusClaim!]! @derivedFrom(field: "transaction")
}

type PiculeFactory @entity(immutable: false) {
  # factory address
  id: ID!

  #pair info
  pairCount: Int!

  # total volume
  totalVolumeUSD: BigDecimal!
  totalVolumeMON: BigDecimal!

  # untracked values - less confident USD scores
  untrackedVolumeUSD: BigDecimal!

  # total liquidity
  totalLiquidityUSD: BigDecimal!
  totalLiquidityMON: BigDecimal!

  # transactions
  txCount: BigInt!
}

type Token @entity(immutable: false) {
  # token address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # used for other stats like marketcap
  totalSupply: BigInt!

  # token specific volume
  tradeVolume: BigDecimal!
  tradeVolumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!

  # transactions across all pairs
  txCount: BigInt!

  # liquidity across all pairs
  totalLiquidity: BigDecimal!

  # derived prices
  derivedMON: BigDecimal!

  # derived fields
  tokenDayData: [TokenDayData!]! @derivedFrom(field: "token")
  pairDayDataBase: [PairDayData!]! @derivedFrom(field: "token0")
  pairDayDataQuote: [PairDayData!]! @derivedFrom(field: "token1")
  pairBase: [Pair!]! @derivedFrom(field: "token0")
  pairQuote: [Pair!]! @derivedFrom(field: "token1")

  tokenHourData: [TokenHourData!]! @derivedFrom(field: "token")
  tokenMinuteData: [TokenMinuteData!]! @derivedFrom(field: "token")

  lastMinuteArchived: BigInt!
  lastHourArchived: BigInt!

  # Archive helpers
  minuteArray: [Int!]!
  hourArray: [Int!]!

  # Archive helpers
  lastMinuteRecorded: BigInt!
  lastHourRecorded: BigInt!
}

type Pair @entity(immutable: false) {
  # pair address
  id: ID!

  # mirrored from the smart contract
  token0: Token!
  token1: Token!
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  totalSupply: BigDecimal!

  # derived liquidity
  reserveMON: BigDecimal!
  reserveUSD: BigDecimal!
  # used for separating per pair reserves and global
  trackedReserveMON: BigDecimal!

  # Price in terms of the asset pair
  token0Price: BigDecimal!
  token1Price: BigDecimal!

  # lifetime volume stats
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  txCount: BigInt!

  # creation stats
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  # Fields used to help derived relationship
  liquidityProviderCount: BigInt! # used to detect new exchanges
  # derived fields
  pairHourData: [PairHourData!]! @derivedFrom(field: "pair")
  liquidityPositions: [LiquidityPosition!]! @derivedFrom(field: "pair")
  liquidityPositionSnapshots: [LiquidityPositionSnapshot!]!
    @derivedFrom(field: "pair")
  mints: [Mint!]! @derivedFrom(field: "pair")
  burns: [Burn!]! @derivedFrom(field: "pair")
  swaps: [Swap!]! @derivedFrom(field: "pair")
}

type LiquidityPosition @entity(immutable: false) {
  id: ID!
  account: Account!
  pair: Pair!
  liquidityTokenBalance: BigDecimal!
}

# saved over time for return calculations, gets created and never updated
type LiquidityPositionSnapshot @entity(immutable: true) {
  id: ID!
  liquidityPosition: LiquidityPosition!
  timestamp: Int! # saved for fast historical lookups
  block: Int! # saved for fast historical lookups
  account: Account! # reference to user
  pair: Pair! # reference to pair
  token0PriceUSD: BigDecimal! # snapshot of token0 price
  token1PriceUSD: BigDecimal! # snapshot of token1 price
  reserve0: BigDecimal! # snapshot of pair token0 reserves
  reserve1: BigDecimal! # snapshot of pair token1 reserves
  reserveUSD: BigDecimal! # snapshot of pair reserves in USD
  liquidityTokenTotalSupply: BigDecimal! # snapshot of pool token supply
  liquidityTokenBalance: BigDecimal! # snapshot of users pool token balance
}

type Mint @entity(immutable: true) {
  # transaction hash + "-" + index in mints Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the primary Transfer event
  to: Bytes!
  liquidity: BigDecimal!

  # populated from the Mint event
  sender: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  logIndex: BigInt
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: Bytes
  feeLiquidity: BigDecimal
}

type Burn @entity(immutable: true) {
  # transaction hash + "-" + index in mints Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the primary Transfer event
  liquidity: BigDecimal!

  # populated from the Burn event
  sender: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  to: Bytes
  logIndex: BigInt
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal

  # mark uncomplete in MON case
  needsComplete: Boolean!

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: Bytes
  feeLiquidity: BigDecimal
}

type Swap @entity(immutable: true) {
  # transaction hash + "-" + index in swaps Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the Swap event
  sender: Bytes!
  from: Bytes! # the EOA that initiated the txn
  amount0In: BigDecimal!
  amount1In: BigDecimal!
  amount0Out: BigDecimal!
  amount1Out: BigDecimal!
  to: Bytes!
  logIndex: BigInt

  # derived info
  amountUSD: BigDecimal!
}

# stores for USD calculations
type Bundle @entity(immutable: false) {
  id: ID!
  monPrice: BigDecimal! # price of MON usd
}

# Data accumulated and condensed into day stats for all of Picule
type PiculeDayData @entity(immutable: true) {
  id: ID! # timestamp rounded to current day by dividing by 86400
  date: Int!

  dailyVolumeMON: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  dailyVolumeUntracked: BigDecimal!

  totalVolumeMON: BigDecimal!
  totalLiquidityMON: BigDecimal!
  totalVolumeUSD: BigDecimal! # Accumulate at each trade, not just calculated off whatever totalVolume is. making it more accurate as it is a live conversion
  totalLiquidityUSD: BigDecimal!

  txCount: BigInt!
}

type PairHourData @entity(immutable: true) {
  id: ID!
  hourStartUnix: Int! # unix timestamp for start of hour
  pair: Pair!

  # reserves
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # total supply for LP historical returns
  totalSupply: BigDecimal

  # derived liquidity
  reserveUSD: BigDecimal!

  # volume stats
  hourlyVolumeToken0: BigDecimal!
  hourlyVolumeToken1: BigDecimal!
  hourlyVolumeUSD: BigDecimal!
  hourlyTxns: BigInt!
}

# Data accumulated and condensed into day stats for each exchange
type PairDayData @entity(immutable: true) {
  id: ID!
  date: Int!
  pairAddress: Bytes!
  token0: Token!
  token1: Token!

  # reserves
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # total supply for LP historical returns
  totalSupply: BigDecimal

  # derived liquidity
  reserveUSD: BigDecimal!

  # volume stats
  dailyVolumeToken0: BigDecimal!
  dailyVolumeToken1: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  dailyTxns: BigInt!
}

type TokenDayData @entity(immutable: true) {
  id: ID!
  date: Int!
  token: Token!

  # volume stats
  dailyVolumeToken: BigDecimal!
  dailyVolumeMON: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  dailyTxns: BigInt!

  # liquidity stats
  totalLiquidityToken: BigDecimal!
  totalLiquidityMON: BigDecimal!
  totalLiquidityUSD: BigDecimal!

  # price stats
  priceUSD: BigDecimal!
}

type TokenHourData @entity(immutable: true) {
  # token address concatendated with date
  id: ID!
  # unix timestamp for start of hour
  periodStartUnix: Int!
  # pointer to token
  token: Token!
  # volume in token units
  volume: BigDecimal!
  # volume in derived USD
  volumeUSD: BigDecimal!
  # volume in USD even on pools with less reliable USD values
  untrackedVolumeUSD: BigDecimal!
  # liquidity across all pools in token units
  totalValueLocked: BigDecimal!
  # liquidity across all pools in derived USD
  totalValueLockedUSD: BigDecimal!
  # price at end of period in USD
  priceUSD: BigDecimal!
  # fees in USD
  feesUSD: BigDecimal!
  # opening price USD
  open: BigDecimal!
  # high price USD
  high: BigDecimal!
  # low price USD
  low: BigDecimal!
  # close price USD
  close: BigDecimal!
}

type TokenMinuteData @entity(immutable: true) {
  # token address concatendated with date
  id: ID!
  # unix timestamp for start of minute
  periodStartUnix: Int!
  # pointer to token
  token: Token!
  # volume in token units
  volume: BigDecimal!
  # volume in derived USD
  volumeUSD: BigDecimal!
  # volume in USD even on pools with less reliable USD values
  untrackedVolumeUSD: BigDecimal!
  # liquidity across all pools in token units
  totalValueLocked: BigDecimal!
  # liquidity across all pools in derived USD
  totalValueLockedUSD: BigDecimal!
  # price at end of period in USD
  priceUSD: BigDecimal!
  # fees in USD
  feesUSD: BigDecimal!
  # opening price USD
  open: BigDecimal!
  # high price USD
  high: BigDecimal!
  # low price USD
  low: BigDecimal!
  # close price USD
  close: BigDecimal!
}

type PairTokenLookup @entity(immutable: true) {
  id: ID!
  pair: Pair!
}

# NFT entities
type ERC721Token @entity(immutable: false) {
  # id token + ercContract + transfer
  id: ID!
  contract: ERC721Contract!
  identifier: BigInt!
  owner: Account!
  approval: Account!
  uri: String!
  transfers: [ERC721Transfer!]! @derivedFrom(field: "token")
  lpLocks: [LPTokenLock!]! @derivedFrom(field: "nftToken")

  # price from marketplace
  price: BigDecimal!
}

type ERC721Contract @entity(immutable: false) {
  id: ID!
  name: String!
  symbol: String!
  totalSupply: BigInt!
  tokens: [ERC721Token!]! @derivedFrom(field: "contract")
}

type Account @entity(immutable: false) {
  id: ID!

  usdSwapped: BigDecimal!
  liquidityPositions: [LiquidityPosition!] @derivedFrom(field: "account")

  # ERC721
  ERC721tokens: [ERC721Token!]! @derivedFrom(field: "owner")
  ERC721transfersFrom: [ERC721Transfer!]! @derivedFrom(field: "from")
  ERC721transfersTo: [ERC721Transfer!]! @derivedFrom(field: "to")

  # Marketplace
  listings: [Listing!]! @derivedFrom(field: "seller")
  salesAsBuyer: [Sale!]! @derivedFrom(field: "buyer")
  salesAsSeller: [Sale!]! @derivedFrom(field: "seller")

  # ICO
  contributions: [Contribution!]! @derivedFrom(field: "contributor")
  icoRequests: [ICORequest!]! @derivedFrom(field: "creator")

  # Projects
  createdProjects: [Project!]! @derivedFrom(field: "creator")
  bonusClaims: [BonusClaim!]! @derivedFrom(field: "claimer")
}

type ERC721Transfer @entity(immutable: true) {
  id: ID!
  token: ERC721Token!
  from: Account!
  to: Account!
  timestamp: BigInt!
  transaction: Transaction!
}

# NFT marketplace entities
type Listing @entity(immutable: false) {
  # id: nftContract + "-" + tokenId
  id: ID!

  seller: Account!

  nftContract: Bytes!
  tokenId: BigInt!
  token: ERC721Token

  price: BigDecimal!

  active: Boolean!

  createdAt: BigInt!
  updatedAt: BigInt!

  sales: [Sale!]! @derivedFrom(field: "listing")
  priceUpdates: [PriceUpdate!]! @derivedFrom(field: "listing")
}

type Sale @entity(immutable: true) {
  # id: transaction hash + "-" + log index
  id: ID!

  listing: Listing!

  seller: Account!
  buyer: Account!

  nftContract: Bytes!
  tokenId: BigInt!
  price: BigDecimal!

  timestamp: BigInt!
  transaction: Transaction!
}

type PriceUpdate @entity(immutable: true) {
  # id: transaction hash + "-" + log index
  id: ID!

  listing: Listing!

  oldPrice: BigDecimal!
  newPrice: BigDecimal!

  timestamp: BigInt!
  transaction: Transaction!
}

type ListingCancellation @entity(immutable: true) {
  # id: transaction hash + "-" + log index
  id: ID!

  listing: Listing!

  seller: Account!

  nftContract: Bytes!
  tokenId: BigInt!

  timestamp: BigInt!
  transaction: Transaction!
}

# global marketplace stat
type MarketplaceStats @entity(immutable: false) {
  # always "1"
  id: ID!
  totalListings: BigInt!
  totalSales: BigInt!

  # volume in MON
  totalVolume: BigInt!
  totalVolumeUSD: BigDecimal!
}

# ICO entities
type ICORequest @entity(immutable: false) {
  # id: numOfRequest
  id: ID!
  numOfRequest: BigInt!
  creator: Account!
  createdAt: BigInt!
  transaction: Transaction!

  contributions: [Contribution!]! @derivedFrom(field: "icoRequest")

  totalContributions: BigDecimal!
  totalContributors: BigInt!
  active: Boolean!
}

type Contribution @entity(immutable: true) {
  # id: transaction hash + "-" + log index
  id: ID!
  icoRequest: ICORequest!
  numOfProject: BigInt!
  contributor: Account!
  amount: BigDecimal!
  timestamp: BigInt!
  transaction: Transaction!
}

type ICOContributor @entity(immutable: true) {
  # id: icoRequestId + "-" + contributorAddress
  id: ID!
  icoRequest: ICORequest!
  contributor: Account!
  firstContributionAt: BigInt!
}

# Token Launch Manager entities
type Project @entity(immutable: true) {
  # id: icoId
  id: ID!
  icoId: BigInt!
  creator: Account!

  # created contract
  token: ERC20Token!
  nft: ERC721Contract!
  fundsManager: FundsManager!

  # metadata
  createdAt: BigInt!
  transaction: Transaction!

  icoRequest: ICORequest
}

type ERC20Token @entity(immutable: false) {
  # contract address
  id: ID!
  project: Project! @derivedFrom(field: "token")
  name: String!
  symbol: String!
  decimals: BigInt!
  totalSupply: BigDecimal!

  # Price data
  derivedUSD: BigDecimal!
  derivedMON: BigDecimal!

  # stat
  totalTransfers: BigDecimal!
  totalHolders: BigInt!
}

type FundsManager @entity(immutable: false) {
  #contract address
  id: ID!
  project: Project! @derivedFrom(field: "fundsManager")

  checkpoints: [Checkpoint!]! @derivedFrom(field: "fundsManager")
  lpTokens: [LPTokenLock!]! @derivedFrom(field: "fundsManager")
  bonusClaims: [BonusClaim!]! @derivedFrom(field: "fundsManager")

  # stat
  totalLockedValue: BigDecimal!
  totalLockedValueUSD: BigDecimal!
  totalBonusClaimed: BigDecimal!
  totalBonusClaimedUSD: BigDecimal!
}

# FundsManager entities
type Checkpoint @entity(immutable: true) {
  # id: transaction hash + "-" + log index
  id: ID!
  fundsManager: FundsManager!

  project: Bytes! # indexed address nft
  value1: BigDecimal! # new checkpointNum
  value2: BigDecimal! # checkpoint amount to receive packed
  value3: BigDecimal! # total comission
  timestamp: BigInt!
  transaction: Transaction!
}

type LPTokenLock @entity(immutable: true) {
  # id: transaction hash + "-" + log index
  id: ID!
  fundsManager: FundsManager!

  param1: Bytes! # indexed address user
  param2: Bytes! # indexed address lpToken
  param3: Bytes! # indexed address nft
  nftToken: ERC721Token! # tokenId
  amount2: BigDecimal! # lp locked
  timestamp: BigInt!
  transaction: Transaction!
}

type BonusClaim @entity(immutable: true) {
  # id: transaction hash + "-" + log index
  id: ID!
  fundsManager: FundsManager!

  claimId: BigInt! # indexed tokenId
  claimer: Account! # indexed user
  token: Bytes! # indexed token address
  amount1: BigDecimal! # uint256
  amount2: BigDecimal! # uint256
  amount3: BigDecimal! # uint256
  timestamp: BigInt!
  transaction: Transaction!
}

# global stat
type GlobalStats @entity(immutable: false) {
  #always "1"
  id: ID!

  # Projects
  totalProjects: BigInt!
  totalTokensCreated: BigInt!

  # ICO
  totalICORequests: BigInt!
  totalContributions: BigDecimal!
  totalContributionValue: BigDecimal!
  totalContributionValueUSD: BigDecimal!

  # Marketplace
  totalListings: BigDecimal!
  totalSales: BigDecimal!
  totalVolume: BigDecimal!
  totalVolumeUSD: BigDecimal!
}

# erc20 entities
type ERC20Mint @entity(immutable: true) {
  # id: transaction hash + "-" + mint index
  id: ID!
  transaction: Transaction!
  token: ERC20Token!
  to: Account!
  amount: BigDecimal!
  timestamp: BigInt!
}

type ERC20Burn @entity(immutable: true) {
  # id: transaction hash + "-" + burn index
  id: ID!
  transaction: Transaction!
  token: ERC20Token!
  from: Account!
  amount: BigDecimal!
  timestamp: BigInt!
}
